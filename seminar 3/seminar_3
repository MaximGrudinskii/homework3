# Инструкция для работы с Git и удалёнными репозиториями

# Что такое Git?

Git — система управления версиями с распределенной архитектурой. В отличие от некогда популярных систем вроде CVS и Subversion (SVN), где полная история версий проекта доступна лишь в одном месте, в Git каждая рабочая копия кода сама по себе является репозиторием. Это позволяет всем разработчикам хранить историю изменений в полном объеме.

# Подготовка репозитория

Для создание репозитория необходимо выполнить команду *git init* в папке с репозиторием и у Вас создаться репозиторий (появится скрытая папка .git)

# Создание коммитов

## Git add

Коммит это одно из базовых понятий в Git. Если объяснять простым языком, то коммит это огромная копия вашего проекта в момент времени, когда этот коммит был сделан.

Для добавления измений в коммит используется команда *git add*. Чтобы использовать команду *git add* напишите *git add <имя файла>*

## Просмотр состояния репозитория

Для того, чтобы посмотреть состояние репозитория используется команда *git status*. Для этого необходимо в папке с репозиторием написать *git status*, и Вы увидите были ли измения в файлах, или их не было.

## Создание коммитов

Для того, чтобы создать коммит(сохранение) необходимо выполнить команду *git commit*. Выполняется она так: *git commit -m "<сообщение к коммиту>*. Все файлы для коммита должны быть ***ДОБАВЛЕНЫ*** и сообщение к коммиту писать ***ОБЯЗАТЕЛЬНО***.

# Перемещение между сохранениями

Для того, чтобы перемещаться между коммитами, используется команда *git checkout*. Используется она в папке с пепозиторием следующим образом: *git checkout <номер коммита>*

# Журнал изменений

Для того, чтобы посмтреть все сделанные изменения в репозитории, используется команда *git log*. Для этого достаточно выполнить команду *git log* в папке с репозиторием.
Список изменений - это файл, в котором содержится хронологически упорядоченный список изменений, внесенных вами в ваш проект. Он часто упорядочен по версии с указанием даты, за которой следует список добавленных, улучшенных и удаленных функций.

# Ветки в Git

## Создание ветки

Для того, чтобы создать ветку, используется команда *git branch*. Делается это следующим образом в папке с репозиторием: *git branch <название новой ветки>*

# Слияние веток

Для того чтобы дабавить ветку в текущую ветку используется команда *git merge*

# Удаление веток

Для удаления ветки ввести команду *"git branch -d 'name branch'"*

# Команда *git checkout*
Команда позволяет переключаться межд последними коммитами

# Изображения в git

Нужно добавить изображения в нашу папку в которой работаем. 
Далее пишем ![подпись к изображению](Название файла с расширением).

# Работа с удаленными репозиториями

1. Создать аккаунт на github
2. Создать локальный репозиторий
3. "Подружить" ваш локальный и удаленный репозитории. github при создании нового репозитория подскажет как это можно сделать
4. Отправить (pull) ваш локальный репозиторий в удаленный на гитхаб , при этом вам, возможно нужно будет авторизоваться на удаленном репозитории
5. Провести изменения с другого компьютера
6. Выкачать (pull) актуальное состояние из удаленного репозитория.
7. Делаем форк интересующего нас аккаунта , 
8. МЫ делаем git clone  для нашей версии этого репозитория 
9. Мы создаем ветку с предлагаемыми изменениями 
10. Производим эти изменения только в этой ветке
11. Отправляем эти изменения на свой аккаунт (push)
12. В окне на гитхаб появляется возможность отпрравить push request
